include("Helpers.jl")
using .SWIPL2J

"""
    PrologStream

A stream object for a SWI-Prolog process.

# Fields
- `alias::String`: unique stream identifier
- `mode::Symbol`: mode of stream (`:read`, `:write`, or `:append`)
- `filename::String`: name of the active file for the stream
- `swipl::IO`: reference to the swipl process in which the stream belongs to
"""
struct PrologStream
    alias::String
    mode::Symbol
    filename::String
    swipl::IO
end

"""
    open_stream(swipl, file::String, mode::Symbol = :write, create_file::Bool = false, 
    alias::Union{String, Nothing} = nothing)::Union{PrologStream, Nothing}

Opens a file via a stream for reading, writing, or appending.
stream_property: https://www.swi-prolog.org/pldoc/doc_for?object=stream_property/2
open: https://www.swi-prolog.org/pldoc/doc_for?object=open/4

# Arguments
- `swipl`: SWI-Prolog process
- `file::String`: active file for the stream
- `mode::Symbol=:write`: mode in which the stream interacts with the file (`:read`, `:write`, or `:append`)
- `create_file::Bool=false`: silently create the file if it doesn't exist.
- `alias::Union{String, Nothing}=nothing`: unique string for SWI-Prolog to identify the stream, automatically 
generated by default
"""
function open_stream(
    swipl::IO,
    file::String, 
    mode::Symbol = :write, 
    create_file::Bool = false, 
    alias::Union{String, Nothing} = nothing,
    )::Union{PrologStream, Nothing}

    if !isopen(swipl) # Early out if the SWI-Prolog instance is not open.
        error("Error: SWIPL process is not open")
        return nothing
    end

    # Validate the file open mode
    if mode != :write && mode != :read && mode != :append
        error("Error: invalid mode passed to open file. Use 'read', 'write', or 'append'")
        return nothing
    end

    # Handle non-exiting file
    if !isfile(file) && !prompt_file_creation(file, create_file)
        return nothing
    end

    # Create stream alias
    stream_alias = ""
    if !isnothing(alias)
        stream_alias = alias
    else
        # Generate randomized stream
        stream_alias = "stream_" * string(rand(UInt))
    end

    result = query_value(swipl, "stream_property(Stream, alias('$(stream_alias)'))")

    if result != "false."
        error("Error: Cannot open file with alias '$(stream_alias)' since it already exists.")
        return nothing
    end

    result = query_bool(swipl, "open('$(file)', $(String(mode)), _, [alias('$(stream_alias)')])")

    if !result
        error("error: Failed to open SWI-Prolog stream for file $(file)")
    end

    return PrologStream(stream_alias, mode, unix_path(file), swipl)
end

"""
    close(stream::PrologStream)::Nothing

Closes a stream.
stream_property: https://www.swi-prolog.org/pldoc/doc_for?object=stream_property/2
close: https://www.swi-prolog.org/pldoc/doc_for?object=close/1

# Arguments
- `stream::PrologStream`: stream object for an SWI-Prolog instance
"""
function close(stream::PrologStream)::Nothing
    if !isopen(stream.swipl) # Early out if the SWI-Prolog instance is not open.
        error("Error: SWIPL process is not open")
        return nothing
    end

    # Ensure the streams file still exists
    if !isfile(stream.filename)
        error("Error: File for stream '$(stream.filename)' no longer exists.")
        return nothing
    end

    result = query_value(stream.swipl, "stream_property(Stream, alias('$(stream.alias)'))")

    # Confirm if the stream exists, if it does, the output will look like 'Stream = stream<...>'
    if !occursin("Stream = ", result)
        error("Error: Failed to find stream, stream '$(stream.alias)' doesn't exist.")
        return nothing
    end

    result = query_bool(stream.swipl, "close('$(stream.alias)').")

    # Ensure the close command was successful
    if !result
        error("Error: Failed to close stream '$(stream.alias)'.")
        return nothing
    end

    return nothing
end

"""
    write(stream::PrologStream, message::String)

Write into a stream. The result of write depends on the mode of the stream, `:append` will add
 the text to the end of the file, `:write` will replace the existing file contents with the message.
Writing to a stream writes directly into the file, thus using the `save` function is not required.
https://www.swi-prolog.org/pldoc/doc_for?object=write/2

# Arguments
- `stream::PrologStream`: stream object for an SWI-Prolog instance
- `message::String`: text to write into the stream
"""
function write(stream::PrologStream, message::String)
    if !isopen(stream.swipl) # Early out if the SWI-Prolog instance is not open.
        error("Error: SWIPL process is not open")
        return nothing
    end

    if (stream.mode == :read)
        error("Error: Attempt to write to stream `$(stream.alias)` while stream is in `:read` mode.")
        return nothing
    end

    # Ensure the file exists before attempting to write
    if !isfile(stream.filename)
        error("Error: File for stream $(stream.filename) no longer exists.")
        return nothing
    end

    result = query_bool(stream.swipl, "write('$(stream.alias)', '$(message)')")

    # Ensure the write was successful
    if !result
        error("Error: Failed to write to file '$(stream.filename)' for the stream '$(stream.alias)'.")
        return nothing
    end

    return nothing
end

"""
    save(stream::PrologStream)

Save any writes in memory to the streams file.
https://www.swi-prolog.org/pldoc/doc_for?object=flush_output/1

# Arguments
- `stream::PrologStream`: stream object for an SWI-Prolog instance
"""
function save_stream(stream::PrologStream)
    if !isopen(stream.swipl) # Early out if the SWI-Prolog instance is not open.
        error("Error: SWIPL process is not open")
        return nothing
    end

    # Ensure the file exists before attempting to save anything to it
    if !isfile(stream.filename)
        error("Error: File for stream $(stream.filename) no longer exists.")
        return nothing
    end

    result = query_bool(stream.swipl, "flush_output('$(stream.alias)')")

    if !result
        error("Error: Failed to save file '$(stream.filename)' for the stream '$(stream.alias)'.")
        return nothing
    end

    return nothing
end